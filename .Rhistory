#lapply
test_info <- lapply(test, subset)
#Scrape function works but produces a list of xml_nodesets
test <- apply(X= nasad_tbl_shrt, FUN = nasad_f, MARGIN = 1)
#write a function to parse the xml_nodes
subset <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
deg <- x %>% html_elements("p:nth-chile(10") %>% html_text(.)
school_info <-tibble(name=name, address=address_url, type=school_type, deg = deg)
}
#lapply
test_info <- lapply(test, subset)
#write a function to parse the xml_nodes
subset <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
deg <- x %>% html_elements("p:nth-child(10") %>% html_text(.)
school_info <-tibble(name=name, address=address_url, type=school_type, deg = deg)
}
#lapply
test_info <- lapply(test, subset)
#write a function to parse the xml_nodes
subset <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
deg <- x %>% html_elements("p:nth-child(10)") %>% html_text(.)
school_info <-tibble(name=name, address=address_url, type=school_type, deg = deg)
}
#lapply
test_info <- lapply(test, subset)
test_info
#write a function to parse the xml_nodes
subset <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
deg <- x %>% html_elements("p:nth-child(10)") %>% html_text(.)
school_info <-tibble(name=name, address=address_url, type=school_type, deg = deg)
return(school_info)
}
#lapply
test_info <- lapply(test, subset)
test_info
#write a function to parse the xml_nodes
subset <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
about <- x %>% html_elements("p:nth-child(3)") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
deg <- x %>% html_elements("p:nth-child(9)") %>% html_text(.)
school_info <-tibble(name=name, address=address_url, about= about, type=school_type, deg = deg)
return(school_info)
}
#lapply
test_info <- lapply(test, subset)
test_info
#write a function to parse the xml_nodes
subset <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
about <- x %>% html_elements("p:nth-child(3)") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
deg <- ifelse(html_elements(x, "p:nth-child(9)")==0, html_elements(x, "p:nth-child(10")) %>% html_text(.)
school_info <-tibble(name=name, address=address_url, about= about, type=school_type, deg = deg)
return(school_info)
}
#lapply
test_info <- lapply(test, subset)
#write a function to parse the xml_nodes
subset <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
about <- x %>% html_elements("p:nth-child(3)") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
deg <- html_elements(x, "h3 + p") %>% html_text(.)
school_info <-tibble(name=name, address=address_url, about= about, type=school_type, deg = deg)
return(school_info)
}
#lapply
test_info <- lapply(test, subset)
matrix(unlist(test_info),nrow=5)
test_info
#write a function to parse the xml_nodes
subset <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
about <- x %>% html_elements("p:nth-child(3)") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
deg <- html_elements(x, "h3 + p") %>% html_text(.)
school_info <-tibble(name=name, address=address_url, about= about, type=school_type, deg = deg)
}
#lapply
test_info <- lapply(test, subset)
test_info
subset <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
about <- x %>% html_elements("p:nth-child(3)") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
deg <- html_elements(x, "h3 + p") %>% html_text(.)
school_info <-tibble(name=name, address=address_url, about= about, type=school_type, deg = deg)
}
#lapply
test_info <- lapply(test, subset)
test_info
#write a function to parse the xml_nodes
subset <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
about <- x %>% html_elements("p:nth-child(3)") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
#deg <- html_elements(x, "h3 + p") %>% html_text(.)
school_info <-tibble(name=name, address=address_url, about= about, type=school_type, deg = deg)
}
#lapply
test_info <- lapply(test, subset)
#write a function to parse the xml_nodes
subset <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
about <- x %>% html_elements("p:nth-child(3)") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
#deg <- html_elements(x, "h3 + p") %>% html_text(.)
school_info <-tibble(name=name, address=address_url, about= about, type=school_type)
}
#lapply
test_info <- lapply(test, subset)
test_info
#lapply
test_info <- tidy(lapply(test, subset))
#written by Dan Gunn 2023
#attempting to compile a list of all accredited art schools in the US.
#info from rayobyte on polite package
library(tidyverse)
#lapply
test_info <- tidy(lapply(test, subset))
library(rvest)
library(broom)
#lapply
test_info <- tidy(lapply(test, subset))
#lapply
test_info <- lapply(test, subset)
tidy(unlist(test_info)))
tidy(unlist(test_info))
test_info
#lapply
test_info <- rbindlist(lapply(test, subset))
#lapply
test_info <- lapply(test, subset)%>% data.table::rbindlist()
test_info
#write a function to parse the xml_nodes
subset_f <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
about <- x %>% html_elements("p:nth-child(3)") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
#deg <- html_elements(x, "h3 + p") %>% html_text(.)
school_info <-tibble(name=name, address=address_url, about= about, type=school_type)
}
#lapply
test_info <- lapply(test, subset_f) %>%
data.table::rbindlist()
View(test_info)
#write a function to parse the xml_nodes
subset_f <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
about <- x %>% html_elements("p:nth-child(3)") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
deg <- html_text(html_elements(x, "h3 + p"))
school_info <-tibble(name=name, address=address_url, about= about, type=school_type)
}
#lapply
test_info <- lapply(test, subset_f) %>%
data.table::rbindlist()
test_info
#write a function to parse the xml_nodes
subset_f <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
about <- x %>% html_elements("p:nth-child(3)") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
deg <- html_text(html_elements(x, "h3 + p"))
school_info <-tibble(name=name, address=address_url, about= about, type=school_type, degree= deg)
}
#lapply
test_info <- lapply(test, subset_f) %>%
data.table::rbindlist()
deg
html_text(html_elements(test[2], "h3 + p"))
html_text(html_elements(test[[2]], "h3 + p"))
html_text(html_elements(test[[2]], "h3 + p"))[2]
#write a function to parse the xml_nodes
subset_f <- function(x){
name <- x %>% html_elements("h2") %>% html_text(.)
address_url <- x %>% html_elements("h2 + p") %>% html_text(.)
about <- x %>% html_elements("p:nth-child(3)") %>% html_text(.)
school_type <- x %>% html_elements("p:nth-child(5)") %>% html_text(.)
deg <- html_text(html_elements(x, "h3 + p"))[2]
school_info <-tibble(name=name, address=address_url, about= about, type=school_type, degree= deg)
}
#lapply
test_info <- lapply(test, subset_f) %>%
data.table::rbindlist()
#write a function to parse the xml_nodes
subset_f <- function(x){
name <- html_text(html_elements(x, "h2"))
address_url <- html_text(html_elements(x, "h2 + p"))
about <- html_text(html_elements(x, "p:nth-child(3)"))
school_type <- html_text(html_elements(x, "p:nth-child(5)"))
deg <- html_text(html_elements(x, "h3 + p"))[2]
school_info <-tibble(name=name, address=address_url, about= about, type=school_type, degree= deg)
}
#lapply
test_info <- lapply(test, subset_f) %>%
data.table::rbindlist()
test_info
str_split(test_info$degree, "\\.")
as.data.frame(unlist(str_split(test_info$degree, "\\.")))
as.data.frame(str_split(test_info$degree, "\\."))
str_split(test_info$degree, "\\.")
test_deg_longer <-str_split(test_info$degree, "\\.")
test_deg_longer <- str_split(test_info$degree, "\\.")
as.data.frame(unlist(str_split(degrees, "\\.")))
as.data.frame(str_split_fixed(degrees_longer[,1], pattern=":", n=2))
degrees_longer <- as.data.frame(unlist(str_split(degrees, "\\.")))
degrees_longer
test_deg_longer
test_deg_longer <- str_split_fixed(test_info$degree, "\\.")
test_deg_longer <- str_split_fixed(test_info$degree, "\\.", n=Inf)
test_deg_longer
View(test_deg_longer)
test_deg_longer <- str_split(test_info$degree, "\\.")
lapply(test_deg_longer, str_split_fixed(.,pattern=":", n=2))
lapply(test_deg_longer, str_split_fixed(pattern=":", n=2))
test_deg_longer <- str_split(test_info$degree, "\\.")
test_deg_longer
lapply(test_deg_longer, str_split_fixed(pattern=":", n=2))
lapply(test_deg_longer, str_split_fixed(.,pattern=":", n=2))
lapply(test_deg_longer, function(x) {str_split_fixed(x,pattern=":", n=2)})
tes_deg_longer_split <- lapply(test_deg_longer, function(x) {str_split_fixed(x,pattern=":", n=2)})
tes_deg_longer_split
View(test_deg_longer)
View(tes_deg_longer_split)
tes_deg_longer_split <- lapply(test_deg_longer, function(x) {str_split_fixed(x,pattern=":", n=Inf)})
tes_deg_longer_split
tes_deg_longer_split <- lapply(test_deg_longer, function(x) {str_split_fixed(x,pattern=":|,", n=Inf)})
tes_deg_longer_split
test_deg_longer_split <- lapply(test_deg_longer, function(x) {str_split_fixed(x,pattern=":|,", n=Inf)})
test_info$degree <- test_deg_longer_split
test_info
test_info[2]
test_info[3]
#lapply and convert to table.
test_info <- lapply(test, subset_f) %>%
data.table::rbindlist()
test_deg_longer <- str_split(test_info$degree, "\\.")
test_deg_longer_split <- lapply(test_deg_longer, function(x) {str_split_fixed(x,pattern=":|,", n=Inf)})
test_deg_longer_split
test_deg_longer <- str_split(test_info$degree, "\\.")
test_deg_longer_split <- lapply(test_deg_longer, function(x) {str_split_fixed(x,pattern=":|;", n=Inf)})
test_deg_longer_split
class(test_deg_longer_split)
head(degrees_longer[[1]])
class(test_deg_longer_split[[1]])
test_deg_longer <- str_split_fixed(test_info$degree, "\\.", n=1)
test_deg_longer
test_deg_longer <- str_split_fixed(test_info$degree, "\\.", n=Inf)
test_deg_longer
test_deg_longer <- test_info %>% str_split_fixed(degree, "\\.", n=Inf)
test_deg_longer <- test_info %>% str_split_fixed(degree, pattern="\\.", n=Inf)
test_deg_longer <- test_info %>% str_split_fixed($degree, pattern="\\.", n=Inf)
test_deg_longer <- test_info %>% str_split_fixed(.$degree, pattern="\\.", n=Inf)
test_deg_longer <- test_info$degree %>% str_split_fixed(., pattern="\\.", n=Inf)
test_deg_longer
class(test_deg_longer)
test_deg_longer <- test_info$degree %>% str_split_fixed(., pattern="\\.", n=Inf) %>% as.data.frame()
test_deg_longer
test_deg_longer_split <- lapply(test_deg_longer, function(x) {str_split_fixed(x,pattern=":|;", n=Inf)})
test_deg_longer_split
View(test_deg_longer)
test_deg_longer_split <- test_deg_longer_split %>% str_split_fixed(.,pattern=":|;", n=Inf)
test_deg_longer_split
test_deg_longer_split <- lapply(test_deg_longer, function(x) {str_split_fixed(x,pattern=":|;", n=Inf)})
class(test_deg_longer)
class(test_deg_longer_split)
test_deg_longer_split <- lapply(test_deg_longer, function(x) {str_split_fixed(x,pattern=":|;", n=Inf)}) %>% as.data.frame()
class(test_deg_longer_split)
test_deg_longer_split
View(test_deg_longer)
View(test_deg_longer_split)
#recombining with test_info
test_info$degree <- test_deg_longer_split
head(test_info)
View(test_info)
test_info$degree[2]
test_info$degree[1]
#recombining with test_info
test_deg_longer_split[1]
#recombining with test_info
test_deg_longer_split[2]
test_info$degree[2]
[2]
#recombining with test_info
test_deg_longer_split[2][2]
#recombining with test_info
test_deg_longer_split[2][1]
#recombining with test_info
test_deg_longer_split[1][2]
#recombining with test_info
test_deg_longer_split[1]
#recombining with test_info
test_deg_longer_split[1,2]
test_deg_longer_split
#how to recombining with test_info?
test_info$degrees_longer <- test_deg_longer_split
#how to recombining with test_info?
test_info_expanded <- cbind(test_info, test_deg_longer_split)
test_info_expanded
View(test_info_expanded)
View(test_deg_longer_split)
pivot_longer(test_deg_longer_split, !V1.1, values_to = "subject")
pivot_longer(test_deg_longer_split, everything(), cols_vary = "slowest")
test_deg_longer <- test_info$degree %>% str_split_fixed(., pattern="\\.", n=Inf) %>% as.data.frame()
test_deg_longer
View(test_deg_longer)
test_info_combined <- cbind(test_info, test_deg_longer)
test_info_combined
View(test_info_combined)
#now pivoting longer
pivot_longer(test_info_combined, !name, values_to = "degree_type")
#now pivoting longer
pivot_longer(test_info_combined, cols= starts_with("V"), values_to = "degree_type")
#now pivoting longer
pivot_longer(test_info_combined, cols= starts_with("V"), values_to = "degree_type", names_repair = "minimal")
test_info_pivot1 <- test_deg_longer_split <- lapply(test_deg_longer, function(x) {str_split_fixed(x,pattern=":|;", n=Inf)}) %>% as.data.frame()
test_deg_longer_split <- lapply(test_deg_longer, function(x) {str_split_fixed(x,pattern=":|;", n=Inf)}) %>% as.data.frame()
#now pivoting longer
test_info_pivot1 <- pivot_longer(test_info_combined, cols= starts_with("V"), values_to = "degree_type", names_repair = "minimal")
View(test_info_pivot1)
#now pivoting longer
test_info_pivot1 <- pivot_longer(test_info_combined, cols= starts_with("V"), values_to = "degree_type", names_repair = "minimal", values_drop_na=TRUE)
lapply(test_info_pivot1, function(x) {str_split_fixed(x,pattern=":|;", n=Inf)}) %>% as.data.frame()
test_set <- lapply(test_info_pivot1, function(x) {str_split_fixed(x,pattern=":|;", n=Inf)}) %>% as.data.frame()
View(test_set)
test_info_pivot1$degree_type %>% str_split_fixed(.,pattern=":|;", n=Inf)
test_info_pivot1$degree_type %>% str_split_fixed(.,pattern=":|;", n=Inf)%>% as.data.frame()
test_set<- test_info_pivot1$degree_type %>% str_split_fixed(.,pattern=":|;", n=Inf)%>% as.data.frame()
#expanded degrees (subjects still in tow) recombined with schools
test_info_combined <- cbind(test_info, test_deg_longer) %>% drop(name)
View(test_info_combined)
#expanded degrees (subjects still in tow) recombined with schools
test_info_combined <- cbind(test_info, test_deg_longer) %>% drop(name)
#now pivoting longer
test_info_pivot1 <- pivot_longer(test_info_combined, cols= starts_with("V"), values_to = "degree_type", names_repair = "minimal", values_drop_na=TRUE)
#now pivoting longer
test_info_pivot1 <- pivot_longer(test_info_combined, cols= starts_with("V"), values_to = "degree_type", names_repair = "minimal", values_drop_na=TRUE)
#this works, but
test_set<- test_info_pivot1$degree_type %>% str_split_fixed(.,pattern=":|;", n=Inf)
#this works, but
test_set<- test_info_pivot1$degree_type %>% str_split_fixed(.,pattern=":|;", n=Inf)
test_info_pivot1 %>% mutate(subject = str_split_fixed(degree_type,pattern=":|;", n=Inf))
test_info_pivot1 %>% mutate(degree_type = str_split_fixed(degree_type,pattern=":|;", n=Inf))
test_info_pivot1 %>% group_by(name) %>% mutate(subject = str_split_fixed(degree_type,pattern=":|;", n=Inf))
test_info_pivot1 %>% group_by(name)
test_info_pivot1 %>% group_by(name)
#written by Dan Gunn 2023
#attempting to compile a list of all accredited art schools in the US.
#info from rayobyte on polite package
library(tidyverse)
library(rvest)
library(polite)
library(stringr)
library(curl)
library(broom)
#reads in the names of the schools into session nasad_url
nasad_url <- bow("https://nasad.arts-accredit.org/directory-lists/accredited-institutions/search/?institutionname=&city=&state=&country=&search=true", force = TRUE)
info <- scrape(nasad_url) %>%
html_nodes("div.wpb_wrapper a") %>%
html_text2() %>%
trimws()
school_names <-info
#part of the url's to add onto IE "?id=I1190"
nasad_nodes <- scrape(nasad_url) %>%
html_nodes("div.wpb_wrapper a") %>%
html_attr("href")%>%
trimws()
# https://nasad.arts-accredit.org/directory-lists/accredited-institutions/search/ Add to URL
nasad_URL_clean <- str_replace(nasad_nodes,"[?]","https://nasad.arts-accredit.org/directory-lists/accredited-institutions/search/?")
#list of search terms
str(nasad_URL_clean)
nasad_URL_tbl <- as_tibble(nasad_URL_clean)
#combined first scrape of list of URLs and school names + export to CSV
nasad_web_full <- tibble(school_names, nasad_URL_clean)
write.csv(nasad_web_full, "nasadwebfull.csv", row.names=FALSE)
nasad_tbl_shrt <- nasad_URL_tbl[1:4,]
#trying to perfect the scrape
# start_html <- bow("https://nasad.arts-accredit.org/directory-lists/accredited-institutions/search/?id=I1190")
# start_nodes <- scrape(start_html) %>% html_elements(".wpb_wrapper")
# class(start_nodes)
#use 2nd instance of class= wpb_wrapper
# name <- start_nodes[2] %>% html_elements("h2") %>% html_text(.)
# address_url <- start_nodes[2] %>% html_elements("h2 + p") %>% html_text(.)
# school_type <- start_nodes[2] %>% html_elements("p:nth-child(5)") %>% html_text(.)
# school_info <- tibble(name=name, address=address_url, type=school_type)
# degrees <- start_nodes[2] %>% html_elements("p:nth-child(10)") %>% html_text(.)
#make into a function to do all of the urls from nasad_url_clean
# Bulk scrape function
nasad_f <- function(x) {
url <- bow(x)
node <- scrape(url) %>% html_elements(".wpb_wrapper")
return(node[2])
}
#Scrape function works but produces a list of xml_nodesets
test <- apply(X= nasad_tbl_shrt, FUN = nasad_f, MARGIN = 1)
str(test)
#write a function to parse the xml_nodes
subset_f <- function(x){
name <- html_text(html_elements(x, "h2"))
address_url <- html_text(html_elements(x, "h2 + p"))
about <- html_text(html_elements(x, "p:nth-child(3)"))
school_type <- html_text(html_elements(x, "p:nth-child(5)"))
deg <- html_text(html_elements(x, "h3 + p"))[2]
school_info <-tibble(name=name, address=address_url, about= about, type=school_type, degree= deg)
}
#lapply and convert to table.
test_info <- lapply(test, subset_f) %>%
data.table::rbindlist()
#NOTE: degrees are tricky because both the 9th or 10th child of p is the degree listing.
#split out the degree types (4 year, associates, bachelors etc) on periods and colons.
#use them as columns and then separate the degrees subjects below them.
test_deg_longer <- test_info$degree %>% str_split_fixed(., pattern="\\.", n=Inf) %>% as.data.frame()
#expanded degrees (subjects still in tow) recombined with schools
test_info_combined <- cbind(test_info, test_deg_longer) %>% drop(name)
#how to recombining with test_info?
test_info_expanded <- cbind(test_info, test_deg_longer_split)
test_info_expanded
View(test_info_expanded)
setwd("~/Documents/r_projects/nasad")
git remote add origin https://github.com/DanGunnStudio/ArtSchoolScrape.git
#written by Dan Gunn 2023
#attempting to compile a list of all accredited art schools in the US.
#info from rayobyte on polite package
library(tidyverse)
library(rvest)
library(polite)
library(stringr)
library(curl)
library(broom)
#reads in the names of the schools into session nasad_url
nasad_url <- bow("https://nasad.arts-accredit.org/directory-lists/accredited-institutions/search/?institutionname=&city=&state=&country=&search=true", force = TRUE)
info <- scrape(nasad_url) %>%
html_nodes("div.wpb_wrapper a") %>%
html_text2() %>%
trimws()
school_names <-info
#part of the url's to add onto IE "?id=I1190"
nasad_nodes <- scrape(nasad_url) %>%
html_nodes("div.wpb_wrapper a") %>%
html_attr("href")%>%
trimws()
# https://nasad.arts-accredit.org/directory-lists/accredited-institutions/search/ Add to URL
nasad_URL_clean <- str_replace(nasad_nodes,"[?]","https://nasad.arts-accredit.org/directory-lists/accredited-institutions/search/?")
#list of search terms
str(nasad_URL_clean)
nasad_URL_tbl <- as_tibble(nasad_URL_clean)
#combined first scrape of list of URLs and school names + export to CSV
nasad_web_full <- tibble(school_names, nasad_URL_clean)
write.csv(nasad_web_full, "nasadwebfull.csv", row.names=FALSE)
nasad_tbl_shrt <- nasad_URL_tbl[1:4,]
#trying to perfect the scrape
# start_html <- bow("https://nasad.arts-accredit.org/directory-lists/accredited-institutions/search/?id=I1190")
# start_nodes <- scrape(start_html) %>% html_elements(".wpb_wrapper")
# class(start_nodes)
#use 2nd instance of class= wpb_wrapper
# name <- start_nodes[2] %>% html_elements("h2") %>% html_text(.)
# address_url <- start_nodes[2] %>% html_elements("h2 + p") %>% html_text(.)
# school_type <- start_nodes[2] %>% html_elements("p:nth-child(5)") %>% html_text(.)
# school_info <- tibble(name=name, address=address_url, type=school_type)
# degrees <- start_nodes[2] %>% html_elements("p:nth-child(10)") %>% html_text(.)
#make into a function to do all of the urls from nasad_url_clean
# Bulk scrape function
nasad_f <- function(x) {
url <- bow(x)
node <- scrape(url) %>% html_elements(".wpb_wrapper")
return(node[2])
}
#Scrape function works but produces a list of xml_nodesets
test <- apply(X= nasad_tbl_shrt, FUN = nasad_f, MARGIN = 1)
str(test)
#write a function to parse the xml_nodes
subset_f <- function(x){
name <- html_text(html_elements(x, "h2"))
address_url <- html_text(html_elements(x, "h2 + p"))
about <- html_text(html_elements(x, "p:nth-child(3)"))
school_type <- html_text(html_elements(x, "p:nth-child(5)"))
deg <- html_text(html_elements(x, "h3 + p"))[2]
school_info <-tibble(name=name, address=address_url, about= about, type=school_type, degree= deg)
}
#lapply and convert to table.
test_info <- lapply(test, subset_f) %>%
data.table::rbindlist()
#NOTE: degrees are tricky because both the 9th or 10th child of p is the degree listing.
#split out the degree types (4 year, associates, bachelors etc) on periods and colons.
#use them as columns and then separate the degrees subjects below them.
test_deg_longer <- test_info$degree %>% str_split_fixed(., pattern="\\.", n=Inf) %>% as.data.frame()
#expanded degrees (subjects still in tow) recombined with schools
test_info_combined <- cbind(test_info, test_deg_longer) %>% drop(name)
